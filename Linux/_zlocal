# -*- mode:sh -*-
# vim:ft=sh
# export DISPLAY=:0

##############################################################################
# self-defined variables
##############################################################################

# deal with different llvm versions
function _my_llvm_version() {
    available=("3.6" "3.7" "3.8" "git")
    USAGE="my_llvm_version 3.3|3.4|3.5|git"
    if [ $# -ne 1 ] || ! (( ${available[(I)${1}]} )); then
      echo "usage: $USAGE"
    fi
    MY_LLVM_VERSION="$1"
}
alias my_ll36='_my_llvm_version 3.6;source ~/.zlocal'
alias my_ll37='_my_llvm_version 3.7;source ~/.zlocal'
alias my_ll38='_my_llvm_version 3.8;source ~/.zlocal'
alias my_llgit='_my_llvm_version git;source ~/.zlocal'
: ${MY_LLVM_VERSION:=3.6}

# alias clang=clang-${MY_LLVM_VERSION}
# alias clang++=clang++-${MY_LLVM_VERSION}
# alias opt=opt-${MY_LLVM_VERSION}

MY_HOME_BIN=~/.bin

# MY_LLVM_ROOT=${MY_ROOT}/llvm-${MY_LLVM_VERSION}
MY_LLVM_ROOT=
if [[ ${MY_LLVM_VERSION} == "git" ]];then
  MY_LLVM_OBJ=${MY_LLVM_ROOT}/obj
else
  MY_LLVM_OBJ=${MY_LLVM_ROOT}/obj/Release+Asserts
fi
# MY_LLVM_OBJ=${MY_LLVM_ROOT}/obj
MY_CLANG_TOOLS=${MY_LLVM_ROOT}/src/tools/clang/tools
MY_STP_INSTALL=${MY_ROOT}/stp/install
MY_KLEE_INSTALL=${MY_ROOT}/klee/install
# MY_KLEE_OBJ=${MY_ROOT}/klee/obj
MY_KLEE_INCLUDE=${MY_ROOT}/klee/src/include
MY_PIN_ROOT=${MY_ROOT}/pintool/pin
MY_KINT_ROOT=${MY_ROOT}/kint
MY_KINT_BIN=${MY_KINT_ROOT}/bin

JPF_ROOT=${MY_ROOT}/jpf
JPF_SYMBC=${JPF_ROOT}/jpf-symbc
JPF_SYMBC_BUILD=${JPF_SYMBC}/build

# variables that need to be exported
export MY_CLANG_TOOLS
# export MY_JAVA=/usr/lib/jvm/java-7-openjdk-amd64

##############################################################################
# core environment variables
##############################################################################

MY_OPAM="${HOME}/.opam/system"
export CAML_LD_LIBRARY_PATH="${MY_OPAM}/lib/stublibs:/usr/local/lib/ocaml/stublibs"
export OPAMUTF8MSGS="1"
export MANPATH="${MY_OPAM}/man:"
export PERL5LIB="${MY_OPAM}/lib/perl5"
export OCAML_TOPLEVEL_PATH="${MY_ROOT}/lib/toplevel"
export MY_OCAML_BIN_PATH="${MY_OPAM}/bin"

unset C_INCLUDE_PATH
unset CPLUS_INCLUDE_PATH
# export CPLUS_INCLUDE_PATH=
# export CPLUS_INCLUDE_PATH=~/qemu/panda/distorm/include:${CPLUS_INCLUDE_PATH}
# export CPLUS_INCLUDE_PATH=${MY_LLVM_ROOT}/src/include:${CPLUS_INCLUDE_PATH}
# export CPLUS_INCLUDE_PATH=/usr/lib/odb/x86_64-linux-gnu/include:${CPLUS_INCLUDE_PATH}
# export CPLUS_INCLUDE_PATH=${MY_KLEE_INCLUDE}:${MY_KLEE_INCLUDE}/../../obj/include:${CPLUS_INCLUDE_PATH}
# # export CPLUS_INCLUDE_PATH=${LATTE_ROOT}/include:${CPLUS_INCLUDE_PATH}
# # export CPLUS_INCLUDE_PATH=${MY_JAVA}/include:${CPLUS_INCLUDE_PATH}
# export C_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}
# export CPLUS_INCLUDE_PATH=${MY_LLVM_ROOT}/src/tools/clang/include:${MY_LLVM_ROOT}/obj/tools/clang/include:${CPLUS_INCLUDE_PATH}
# 
unset LD_LIBRARY_PATH
# export LD_LIBRARY_PATH=
# export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu
# export LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}
# export LD_LIBRARY_PATH=${LATTE_ROOT}/lib:${LD_LIBRARY_PATH}
# export LD_LIBRARY_PATH=${JPF_SYMBC}/lib:${LD_LIBRARY_PATH}
# export LD_LIBRARY_PATH=${MY_LLVM_OBJ}/lib:${MY_STP_INSTALL}/lib:${LD_LIBRARY_PATH}
# export LD_LIBRARY_PATH=${HOME}/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib:${LD_LIBRARY_PATH}

export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig

export ANDROID_HOME="${HOME}/Android/a-sdk"
ADK_VERSION=19
ANDROID_CP=${ANDROID_HOME}/platforms/android-${ADK_VERSION}
export ANDROID_SDK_HOME=${ANDROID_HOME}
export DROIDSAFE_SRC_HOME="${HOME}/RESEARCH/android/droidsafe-src"

## Java
export CLASSPATH=
export CLASSPATH=${JPF_SYMBC_BUILD}/jpf-symbc.jar:${JPF_SYMBC_BUILD}/jpf-symbc-classes.jar:${JPF_SYMBC_BUILD}/jpf-symbc-annotations.jar:${CLASSPATH}
# export CLASSPATH=/usr/share/java/guava.jar:${CLASSPATH}
# export CLASSPATH=${ANDROID_CP}:$CLASSPATH
export CLASSPATH=${ANDROID_HOME}/extras/android/support/v7/appcompat/libs/android-support-v7-appcompat.jar:${ANDROID_HOME}/extras/android/support/v7/appcompat/libs/android-support-v4.jar:${ANDROID_HOME}/platforms/android-21/android.jar:${CLASSPATH}
export DAIKONDIR=${MY_ROOT}/daikon_root/daikon-5.2.12

alias apktool="java -jar ${HOME}/Android/Apktool/brut.apktool/apktool-cli/build/libs/apktool-cli.jar"
alias smali="java -jar ~/Android/smali/smali.jar"
alias baksmali="java -jar ~/Android/smali/baksmali.jar"

## Python
export PYTHONPATH=
export PYTHONPATH=${MY_LLVM_ROOT}/src/tools/clang/bindings/python:$PYTHONPATH

# golang
export GOPATH=~/gocode

# cabal home
export MY_CABAL=~/.cabal
# cargo home
export MY_CARGO_HOME=~/.cargo
export CARGO_INCREMENTAL=0
# export RUST_LOG=info
export RUST_SRC_PATH=$(rustc --print sysroot)/lib/rustlib/src/rust/src

# export PATH=/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
export PATH=/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/usr/local/games:/usr/games
export PATH=${MY_CARGO_HOME}/bin:$PATH
export PATH=/usr/local/texlive/2017/bin/x86_64-linux:$PATH
export PATH=${MY_LLVM_OBJ}/bin:${MY_CLANG_TOOLS}/scan-build:${MY_CLANG_TOOLS}/scan-view:${MY_STP_INSTALL}/bin:$PATH
export PATH=${MY_WLLVM_ROOT}:$PATH
export PATH=${MY_KLEE_INSTALL}/bin:$PATH
export PATH=${MY_HOME_BIN}:${MY_HOME_BIN}/git-scripts:${MY_HOME_BIN}/Linux:~/.local/bin:$PATH
export PATH=${GOPATH}/bin:$PATH
export PATH=${MY_KINT_BIN}:$PATH
export PATH=${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/build-tools/25.0.2:$PATH
export PATH=/usr/local/heroku/bin:$PATH
export PATH=~/RESEARCH/dex2jar-2.0:$PATH
export PATH=~/src/stellar/stellar-core/build/src:$PATH
export PATH=${MY_OCAML_BIN_PATH}:$PATH
export PATH=${MY_CABAL}/bin:$PATH
export PATH=/opt/ghc/bin:$PATH
export PATH=${HOME}/tools/depot_tools:$PATH
export PATH=${HOME}/pinpoint/bin:$PATH
export PATH=/usr/local/lib/fot/bin:$PATH
export PATH=/snap/bin:$PATH
# export PATH=${MY_ROOT}/android/src:$PATH
# ${LATTE_ROOT}/bin:
# export PATH=~/tools/dotfiles/_builds/rtags/build/bin:$PATH
# export PATH=${MY_PIN_ROOT}:$PATH


# nvm stuff (this took TOO MUCH time)
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
# yarn
YARN_G_BIN=${HOME}/.yarn/bin
export PATH=${YARN_G_BIN}:$PATH

# conscript
export CONSCRIPT_HOME="$HOME/.conscript"
export CONSCRIPT_OPTS="-XX:MaxPermSize=512M -Dfile.encoding=UTF-8"
export PATH=$CONSCRIPT_HOME/bin:$PATH

export NO_AT_BRIDGE=1

##############################################################################
# for wllvm
##############################################################################
export LLVM_COMPILER=clang
export WLLVM_OUTPUT=WARNING

# NVIM
NVIM_LISTEN_ADDRESS=/tmp/nvimsocket

##############################################################################
# MISC
##############################################################################
stty ixany
stty ixoff -ixon

export CHTSH_CURL_OPTIONS="-q"
